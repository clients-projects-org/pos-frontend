import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define a type for the variant details
interface Attribute {
	name: string;
	_id: string;
}

export interface Variant {
	_id: string;
	variant_id: {
		_id: string;
		name: string;
		status: string;
		description: string;
		attributes: Attribute[];
		created_by: string;
		createdAt: string;
		updatedAt: string;
	};
	attribute_id: string;
	product_id: string;
	product_name: string;
	sell_price: number;
	select_quantity: number;
	quantity: number;
}

// Define a type for the initial state
interface VariantState {
	variants: Variant[];
}

// Initial state
const initialState: VariantState = {
	variants: [],
};

// Create the Redux slice
const posSlice = createSlice({
	name: 'variant',
	initialState,
	reducers: {
		// Action to add a single variant
		addVariant(state, action: PayloadAction<Variant>) {
			const variantExists = state.variants.find(
				(v) => v._id === action.payload._id
			);

			if (!variantExists) {
				state.variants.unshift({ ...action.payload, select_quantity: 1 });
			} else {
				state.variants = state.variants.map((v) => {
					if (v._id === action.payload._id && v.quantity > v.select_quantity) {
						return {
							...v,
							select_quantity: v.select_quantity + 1,
						};
					}

					return v;
				});
			}
		},

		// Action to remove a variant
		removeVariant(state, action: PayloadAction<string>) {
			state.variants = state.variants.filter((v) => v._id !== action.payload);
		},

		// Increment quantity by 1
		incrementQuantity(state, action: PayloadAction<string>) {
			const variant = state.variants.find((v) => v._id === action.payload);
			if (variant && variant.quantity > variant.select_quantity) {
				variant.select_quantity += 1;
			}
		},

		// Decrement quantity by 1 (but not below 1)
		decrementQuantity(state, action: PayloadAction<string>) {
			const variant = state.variants.find((v) => v._id === action.payload);
			if (variant && variant.select_quantity > 1) {
				variant.select_quantity -= 1;
			}
		},

		// Update quantity based on user input
		updateQuantity(
			state,
			action: PayloadAction<{ _id: string; quantity: number }>
		) {
			const variant = state.variants.find((v) => v._id === action.payload._id);

			if (variant) {
				const newQuantity = Math.min(action.payload.quantity, variant.quantity);
				if (newQuantity > 0) {
					variant.select_quantity = newQuantity;
				}
			}
		},
	},
});

// Export the actions generated by createSlice
export const {
	addVariant,
	removeVariant,
	incrementQuantity,
	decrementQuantity,
	updateQuantity,
} = posSlice.actions;

// Export the reducer to be added to the store
export default posSlice;
